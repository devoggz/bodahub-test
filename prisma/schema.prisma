// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id String @id @default(cuid())

  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?

  phoneNumber String?   @unique
  password    String?
  idNumber    String?   @unique
  bikeNumber  String?
  role        UserRole? @default(USER)
  riderType   String?
  image       String?
  points      Int?      @default(5)
  terms       Boolean?  @default(false)
  ward        String?
  stage       String?
  accounts    Account[]
  comments    Comment[]
  stages      Stage[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Session   Session[]

  @@map("users")
}

model Post {
  id Int @id @default(autoincrement())

  title        String
  category     String
  thumbnailURL String?
  videoURL     String
  content      String?
  createdAt    DateTime @default(now())

  @@map("posts")
}

model UserPost {
  id Int @id @default(autoincrement())

  title        String
  category     String
  thumbnailURL String?
  content      String?

  videoURL  String
  createdAt DateTime @default(now())

  @@map("userposts")
}

enum TaskCategory {
  StoryZaPesa
  SokoLaBoda
  VifaaNaMapambo
  SautiZivume
  TueleweTuinuke
  Changamoto
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  thumbnail   String
  category    TaskCategory @default(StoryZaPesa)
  points      Int
  video       String?
  description String?
  createdAt   DateTime     @default(now())

  @@map("tasks")
}

model Stage {
  id         String   @id @default(cuid())
  stageName  String
  county     String
  sub_county String
  ward       String
  longitude  String
  latitude   String
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@map("stages")
}

model Comment {
  id        String   @id @default(cuid())
  comment   String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  postId    String?

  @@map("comments")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
